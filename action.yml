name: "Terraform Resource Action"
branding:
  icon: aperture
  color: orange
description: "Terraform resource port from Concourse. It is meant to ease portability across Github Actions and Concourse Pipelines."
inputs:
  env_name:
    description: "Name of the environment to manage, e.g. staging. A Terraform workspace will be created with this name."
    required: false
  terraform_source:
    description: "The relative path of the directory containing your Terraform configuration files. For example: if your .tf files are stored in a git repo called prod-config under a directory terraform-configs, you could do a get: prod-config in your pipeline with terraform_source: prod-config/terraform-configs/ as the source."
    required: true
  source:
    description: "JSON object with backend config"
    required: true
  var_files:
    description: "A list of files containing Terraform input variables. These files can be in YAML or JSON format, or HCL if the filename ends in .tfvars"
    required: false
  override_files:
    description: "A list of files to copy into the terraform_source directory. Override files must follow conventions outlined here such as file names ending in _override.tf"
    required: false
  delete_on_failure:
    description: "If true, the resource will run terraform destroy if terraform apply returns an error."
    required: false
  vars:
    description: "A collection of Terraform input variables. These are typically used to specify credentials or override default module values. See Terraform Input Variables for more details."
    required: false
  output_path:
    description: "A place to emit the terraform output metadata"
    required: false

runs:
  using: 'docker'
  image: 'Dockerfile'
  args:
    - ${{ inputs.env_name }}
    - ${{ inputs.terraform_source }}
    - ${{ inputs.source }}
    - ${{ inputs.var_files }}
    - ${{ inputs.override_files }}
    - ${{ inputs.delete_on_failure }}
    - ${{ inputs.vars }}
    - ${{ inputs.output_path }}